[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lemur"
dynamic = ["version", "readme", "dependencies", "optional-dependencies"]
description = "Certificate management and orchestration service"
authors = [
    {name = "The Lemur developers", email = "security@netflix.com"}
]
license = {text = "Apache License, Version 2.0"}
classifiers = [
    "Framework :: Flask",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Topic :: Software Development",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Natural Language :: English",
    "License :: OSI Approved :: Apache Software License"
]
requires-python = ">=3.10"


[project.urls]
homepage = "https://github.com/Netflix/lemur"
repository = "https://github.com/Netflix/lemur"

[project.scripts]
lemur = "lemur.manage:main"

[project.entry-points."lemur.plugins"]
verisign_issuer = "lemur.plugins.lemur_verisign.plugin:VerisignIssuerPlugin"
acme_issuer = "lemur.plugins.lemur_acme.plugin:ACMEIssuerPlugin"
acme_http_issuer = "lemur.plugins.lemur_acme.plugin:ACMEHttpIssuerPlugin"
aws_destination = "lemur.plugins.lemur_aws.plugin:AWSDestinationPlugin"
aws_acm_destination = "lemur.plugins.lemur_aws.plugin:ACMDestinationPlugin"
aws_source = "lemur.plugins.lemur_aws.plugin:AWSSourcePlugin"
aws_acm_source = "lemur.plugins.lemur_aws.plugin:AWSACMSourcePlugin"
aws_s3 = "lemur.plugins.lemur_aws.plugin:S3DestinationPlugin"
aws_sns = "lemur.plugins.lemur_aws.plugin:SNSNotificationPlugin"
email_notification = "lemur.plugins.lemur_email.plugin:EmailNotificationPlugin"
slack_notification = "lemur.plugins.lemur_slack.plugin:SlackNotificationPlugin"
java_truststore_export = "lemur.plugins.lemur_jks.plugin:JavaTruststoreExportPlugin"
java_keystore_export = "lemur.plugins.lemur_jks.plugin:JavaKeystoreExportPlugin"
openssl_export = "lemur.plugins.lemur_openssl.plugin:OpenSSLExportPlugin"
atlas_metric = "lemur.plugins.lemur_atlas.plugin:AtlasMetricPlugin"
atlas_metric_redis = "lemur.plugins.lemur_atlas_redis.plugin:AtlasMetricRedisPlugin"
kubernetes_destination = "lemur.plugins.lemur_kubernetes.plugin:KubernetesDestinationPlugin"
cryptography_issuer = "lemur.plugins.lemur_cryptography.plugin:CryptographyIssuerPlugin"
cfssl_issuer = "lemur.plugins.lemur_cfssl.plugin:CfsslIssuerPlugin"
digicert_issuer = "lemur.plugins.lemur_digicert.plugin:DigiCertIssuerPlugin"
digicert_source = "lemur.plugins.lemur_digicert.plugin:DigiCertSourcePlugin"
digicert_cis_issuer = "lemur.plugins.lemur_digicert.plugin:DigiCertCISIssuerPlugin"
digicert_cis_source = "lemur.plugins.lemur_digicert.plugin:DigiCertCISSourcePlugin"
csr_export = "lemur.plugins.lemur_csr.plugin:CSRExportPlugin"
sftp_destination = "lemur.plugins.lemur_sftp.plugin:SFTPDestinationPlugin"
vault_source = "lemur.plugins.lemur_vault_dest.plugin:VaultSourcePlugin"
vault_desination = "lemur.plugins.lemur_vault_dest.plugin:VaultDestinationPlugin"
adcs_issuer = "lemur.plugins.lemur_adcs.plugin:ADCSIssuerPlugin"
adcs_source = "lemur.plugins.lemur_adcs.plugin:ADCSSourcePlugin"
entrust_issuer = "lemur.plugins.lemur_entrust.plugin:EntrustIssuerPlugin"
entrust_source = "lemur.plugins.lemur_entrust.plugin:EntrustSourcePlugin"
azure_destination = "lemur.plugins.lemur_azure_dest.plugin:AzureDestinationPlugin"
google_ca_issuer = "lemur.plugins.lemur_google_ca.plugin:GoogleCaIssuerPlugin"

[tool.setuptools]
include-package-data = true
zip-safe = false

[tool.setuptools.packages.find]
where = ["."]
include = ["lemur*"]

[tool.setuptools.dynamic]
version = {attr = "lemur.__about__.__version__"}
readme = {file = "README.rst"}
dependencies = {file = ["requirements.txt"]}
optional-dependencies.tests = {file = ["requirements-tests.txt"]}
optional-dependencies.docs = {file = ["requirements-docs.txt"]}
optional-dependencies.dev = {file = ["requirements-dev.txt"]}

[tool.pytest]
python_files = "test*.py"
addopts = "--tb=native -p no:doctest"
norecursedirs = "bin dist docs htmlcov script hooks node_modules .* {args}"

[tool.flake8]
ignore = ["F999", "E501", "E128", "E124", "E402", "W503", "E731", "F841", "F405"]
max-line-length = 100
exclude = [".tox", ".git", "*/migrations/*", "lemur/static/*", "docs/*"]

[tool.wheel]
universal = true